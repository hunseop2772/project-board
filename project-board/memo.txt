MockMvc
웹 어플리케이션을 어플리케이션 서버에 배포하지 않고 테스트용 MVC 환경을 만들어 요청 및 전송, 응답기능을
제공하는 유틸리티 클래스

Query DSL
- JPA를 좀 더 효율적으로 사용할 수 있는 라이브러리
- 오픈소스 프로젝트로 JPQL을 Java 코드로 작성할 수 있도록 함
- 정적 타입을 이용해서 SQL과 같은 쿼리를 생성해줌

@ConfigurationPropertiesScan
- @EnableConfigurationProperties를 이용해 설정 프로퍼티 클래스를 사용하는 경우 클래스가
    많아지면 코드가 무거워지고 복잡해짐

레코드(record)
- 클래스의 특별한 종류
- DTO를 편리하게 생성하기 위한 클래스
- 자바 16부터 공식 기능이 되었음
- 열거타입과 마찬가지로 자바 클래스의 종류
- 다른 클래스를 상속받을 수 없음
- abstract로 선언할 수 없고 암시적으로 final로 선언됨
- 본문(body)에는 정적필드, 정적 메서드, 정적 이니셜라이저, 생성자, 인스턴스 메서드
증첩타입(클래스, 인터페이스, 열거형등)을 선언할 수 있음

직렬화
- 자바 시스템 내부에서 사용되는 객체 또는 데이터를 외부의 자바 시스템에서도 사용할 수 있도록
 바이트 형태로 데이터 변환하는 기술과 바이트로 변환된 데이터를 다시 객체로 변환(역 질렬화 )하는 기술

 Serializable 인터페이스
 - 작좁 만든 클래스가 파일에 읽거나 쓸 수 있도록 할 때, 다른 서버로 보내거나 받을 수 있도록
할 때 Serializable를 구현해야 함!
 - 생성한 객체를 파일로 저장 할 때
 - 저장한 객체를 읽어올 때
 - 다른 서버에서 생성한 객체를 주고 받을 때


 타임리프

 th:text : 화면에 값을 출력 (일반적인 텍스트 형식으로 출력)

 <attr th:text = "${article}"></attr>

 th:if : 조건문과 같이 사용하며, 해당 조건이 만족한 경우에만 보여준다,

 <attr th:if="${error}">
    <p> 에러 발생 </p>
 </attr>

 th:errors : 해당 value의 error가 있는 경우 출력

 th: action : form 태그 이용 시, 경로로 요청을(url) 보낼 때 사용

 th:object : form submit을 할 때 form 데이터가 th:object에 설정해준 객체로 받아짐
            컨트롤러와 뷰(화면) 사이의 DTO 클래스의 객체

 th:href : <a> 태그의 href 속성과 동일, 콘텍스트 경로를 포함

 th:field : 각각의 필드들을 매핑해주는 역할, 설정해준 값으로 th:object 에 설정해 준 객체의 내부와 매칭

 th:each : 반복문으로 자바의 forEach와 유사